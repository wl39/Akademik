package uk.ac.standrews.cs.host.cs3099user20.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;

public class FileData extends SimpleFile {

    @Schema(example = "",
    description = "Base64 format of a file")
    private String base64Value;
    @Schema(example = "text/html", description = "MIME type of given file.")
    private String mime;


    public FileData(String filename, boolean isDir, String base64value, String mime) {
        super(filename, isDir);
        this.base64Value = (base64value == null) ? "" : base64value;
        this.mime = mime;
    }

    public FileData(@JsonProperty("filename")String filename, @JsonProperty("base64value") String base64value) {
        super(filename);
        this.base64Value = base64value;
        try {
            Path path = new File(filename).toPath();
            this.mime = Files.probeContentType(path);
        } catch (Exception e) {
            this.mime = null;
        }
    }

    public FileData(String base64value) {
        this("", true, base64value, "application/zip"); // assume it's a zip file
    }

    public String getBase64Value() {
        return (base64Value == null) ? "" : base64Value;
    }

    public void setBase64Value(String base64Value) {
        this.base64Value = (base64Value == null) ? "" : base64Value;
    }

    public String getMime() {
        return mime;
    }

    public void setMime(String mime) {
        this.mime = mime;
    }
}
